{openapi: 3.0.3
info:
  title: WalletService - OpenAPI 1.0
  description: |-
    This is a sample of payment resource for players. Player have to be registered to make and see transactions.
  contact:
    email: roko.mdn@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.4
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
paths:
  /login:
    post:
      tags:
        - login
      summary: Authification and receive jwt
      description: Insert login password
      operationId: login
      requestBody:
        description: Insert login password and get jwt
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthPlayerDto'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        '400':
          description: Wrong user or password
  /transaction:
    get:
      tags:
        - transaction
      summary: Balance
      description: Show balance
      operationId: balance
      parameters:
        - in: query
          name: jwt
          description: Insert jwt
          schema:
            $ref: '#/components/schemas/Jwt'
          required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        '400':
          description: Wrong jwt
    post:
      tags:
        - transaction
      summary: Make transaction
      description: Make transaction
      operationId: transaction
      requestBody:
        description: Insert transaction with unique id
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InTransactionDto'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutTransactionDto'
        '400':
          description: Wrong jwt
  /transactions:
    get:
      tags:
        - transactions
      summary: Get all transactions
      description: Get all transactions
      operationId: transactions
      parameters:
        - in: query
          name: jwt
          description: Insert jwt
          schema:
            $ref: '#/components/schemas/Jwt'
          required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutTransactionDtos'
        '400':
          description: Wrong jwt
  /registration:
    post:
      tags:
        - registration
      summary: Register new player
      description: Register new player
      operationId: registration
      requestBody:
        description: Insert transaction with unique id
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterPlayerDto'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        '400':
          description: Player already exists
    delete:
      tags:
        - registration
      summary: Delete player
      description: Delete player
      operationId: deletePlayer
      parameters:
        - in: query
          name: deletePlayer
          description: Player name and admin jwt
          schema:
            $ref: '#/components/schemas/DeletePlayerDto'
          required: true
      responses:
        '200':
          description: Successful operation
        '400':
          description: Player not found
components:
  schemas:
    DeletePlayerDto:
      required:
        - name
        - jwt
      type: object
      properties:
        name:
          type: string
          example: "doctorvi"
        jwt:
          type: string
          example: "jwt"
    RegisterPlayerDto:
      required:
        - name
        - balance
        - is_admin
        - jwt
      type: object
      properties:
        name:
          type: string
          example: "doctorvi"
        balance:
          type: number
          format: float
        is_admin:
          type: boolean
        jwt:
          type: string
          example: "jwt"
    OutTransactionDtos:
      required:
        - transactions
      properties:
        transactions:
          type: array
    OutTransactionDto:
      required:
        - id
        - transactionType
        - amount
        - player_id
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        transactionType:
          type: string
          example: "CREDIT"
        amount:
          type: number
          format: float
        player_id:
          type: integer
          format: int64
      xml:
        name: OutTransactionDto
    InTransactionDto:
      required:
        - id
        - transactionType
        - amount
        - jwt
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        transactionType:
          type: string
          example: "CREDIT"
        amount:
          type: number
          format: float
        jwt:
          type: string
          example: "jwt"
      xml:
        name: InTransactionDto
    Jwt:
      required:
        - jwt
      type: object
      properties:
        jwt:
          type: string
          example: "jwt"
      xml:
        name: Jwt
    AuthPlayerDto:
      required:
        - name
        - password
      type: object
      properties:
        name:
          type: string
          example: "login"
        password:
          type: string
          example: "password"
      xml:
        name: AuthPlayerDto
    Player:
      required:
        - id
        - name
        - password
        - balance
        - is_admin
        - jwt
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: "login"
        password:
          type: string
          example: "password"
        balance:
          type: number
          format: float
        is_admin:
          type: boolean
        jwt:
          type: string
      xml:
        name: Player}
